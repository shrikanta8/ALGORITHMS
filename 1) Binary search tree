//iterator over the in-order traversal of a binary search tree (BST)
/**1) BSTIterator(TreeNode root) Initializes an object of the BSTIterator class. 
The root of the BST is given as part of the constructor. 
The pointer should be initialized to a non-existent number smaller than any element in the BST.
2) boolean hasNext() Returns true if there exists a number in the traversal to the right of the pointer, otherwise returns false.
3) int next() Moves the pointer to the right, then returns the number at the pointer.**/



/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
stack<TreeNode*>s;
class BSTIterator {
public:
    
    BSTIterator(TreeNode* root) {
           while(root){
               s.push(root);
               root=root->left;
           }
    }
    
    int next() {
        TreeNode* temp = s.top();
        s.pop();
        BSTIterator(temp->right);
        return temp->val;
    }
    
    bool hasNext() {
        return !s.empty();
    }
};

/**
 * Your BSTIterator object will be instantiated and called as such:
 * BSTIterator* obj = new BSTIterator(root);
 * int param_1 = obj->next();
 * bool param_2 = obj->hasNext();
 */
