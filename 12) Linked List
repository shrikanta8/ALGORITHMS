
/* Node structure  used in the program

struct Node{
	int data;
	struct Node * next;
	struct Node * bottom;
	
	Node(int x){
	    data = x;
	    next = NULL;
	    bottom = NULL;
	}
	
};
*/

/*  Function which returns the  root of 
    the flattened linked list. */

Node *mergeLists(Node *l1,Node *l2){
    Node *temp= new Node(0);
    Node *ret=temp;
    while(l1 && l2){
        if(l1->data>l2->data){
            temp->bottom=l2;
            temp=temp->bottom;
            l2=l2->bottom;
        }
        else{
            temp->bottom=l1;
            temp=temp->bottom;
            l1=l1->bottom;
        }
    }
    if(l1) temp->bottom=l1;
    if(l2) temp->bottom=l2;
    return ret->bottom;
}


Node *flatten(Node *root)
{
   // Your code here
   if(!root || !root->next  ) return root;
   
   root->next=flatten(root->next);
   return mergeLists(root,root->next);
}


Input:
5 -> 10 -> 19 -> 28
|     |     |     | 
7     20    22   35
|           |     | 
8          50    40
|                 | 
30               45
Output:  5-> 7-> 8- > 10 -> 19-> 20->
22-> 28-> 30-> 35-> 40-> 45-> 50
