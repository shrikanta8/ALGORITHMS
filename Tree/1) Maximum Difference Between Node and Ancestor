//https://leetcode.com/problems/maximum-difference-between-node-and-ancestor/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int find(TreeNode* root,int maxValue,int minValue){
        if(!root)
            return 0;
        maxValue = max(maxValue,root->val);
        minValue = min(minValue,root->val);   
        int l = find(root->left, maxValue,minValue );
        int r = find(root->right, maxValue,minValue );
        return max(maxValue-minValue,max(l,r));
    }
    int maxAncestorDiff(TreeNode* root) {
        if(!root)
            return NULL;
        return find(root,0,100000);
    }
};
